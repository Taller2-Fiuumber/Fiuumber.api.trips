name: Production
on:
  push:
    branches:
      - 'main'
jobs:
  linter:
    name: Format and lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Lint with flake8
      run: |
        make format

  unit-test:
    needs: [linter]
    name: Unit test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        sudo apt install libkrb5-dev
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Test with pytest
      run: |
        make test

  build-and-push-image:
    needs: [unit-test]
    name: Build and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY_URL: registry.gitlab.com/fiuba-memo2/tp2-20221
      CI_IMAGE_REGISTRY: ghcr.io
      CI_OWNER: Taller2-Fiuumber
      CI_IMAGE_NAME: ${{ github.repository }}
      GITHUB_TOKEN: ${{ github.token }}
      GITHUB_USERNAME: ${{ github.actor }}
      MONGODB_URL: ${{ secrets.MONGODB_URL }}
      DB_NAME: ${{ secrets.DB_NAME }}
      HEROKU_APP: fiuumber-api-trips
      DD_API_KEY: ${{ secrets.DD_API_KEY }}
    steps:
      - uses: actions/checkout@master

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.CI_IMAGE_REGISTRY }}
          username: ${{ env.GITHUB_USERNAME }}
          password: ${{ env.GITHUB_TOKEN }}

      - name: Get image tag
        env:
          IMAGE_NAME: ${{ env.CI_IMAGE_REGISTRY }}/${{ env.CI_IMAGE_NAME }}
        run: |
          VERSION=$(cat Version.txt)
          IMAGE_NAME=$(echo "$IMAGE_NAME" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_TAG=$(echo $IMAGE_NAME:$VERSION)" >> $GITHUB_ENV
      - name: Build image
        env:
          MONGODB_URL: ${{ secrets.MONGODB_URL }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DD_API_KEY: ${{ secrets.DD_API_KEY }}
        run: docker build -t ${{ env.IMAGE_TAG }} .
          --build-arg database_url="$MONGODB_URL"
          --build-arg database_name="$DB_NAME"
          --build-arg dd_api_key="$DD_API_KEY"
      - name: Push image to Github Container Registry
        run: docker push ${{ env.IMAGE_TAG }}

      - name: Log in to Heroku Container Registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:login

      - name: Tag container of Heroku Container Registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: docker tag ${{ env.IMAGE_TAG }} registry.heroku.com/${{ env.HEROKU_APP }}/web

      - name: Push container to Heroku Container Registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          MONGODB_URL: ${{ secrets.MONGODB_URL }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DD_API_KEY: ${{ secrets.DD_API_KEY }}
        run: heroku container:push web
          --arg database_url="$MONGODB_URL",database_name="$DB_NAME",dd_api_key="$DD_API_KEY"
          --app ${{ env.HEROKU_APP }}

      - name: Release container to Heroku Container Registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:release web --app ${{ env.HEROKU_APP }}
